services:
  # Our services
  msl_reverseproxy:
    image: oliverschlueter/msl-reverseproxy:latest
    container_name: msl_reverseproxy
    restart: unless-stopped
    environment:
      - "LOKI_URL=${LOKI_URL}"
      - "CONFIG_PATH=${REVERSE_PROXY_CONFIG_PATH}"
      - "FEATURE_FLAGS_SEND_LOGS_TO_LOKI=${FEATURE_FLAGS_SEND_LOGS_TO_LOKI}"
    networks:
      msl_network:
    ports:
      - "9080:8080"
    volumes:
      - ./reverseproxy:/app/data
    healthcheck:
      test: "curl --fail http://msl_reverseproxy:8080/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  msl_frontend:
    image: oliverschlueter/msl-frontend:latest
    restart: unless-stopped
    environment:
      - "LOKI_URL=${LOKI_URL}"
      - "FEATURE_FLAGS_SEND_LOGS_TO_LOKI=${FEATURE_FLAGS_SEND_LOGS_TO_LOKI}"
    networks:
      msl_network:
    deploy:
      replicas: 3
    healthcheck:
      test: "curl --fail http://msl_frontend:8081/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  msl_backend:
    image: oliverschlueter/msl-backend:latest
    restart: unless-stopped
    depends_on:
      - msl_nats
      - msl_mongo
    environment:
      - "LOKI_URL=${LOKI_URL}"
      - "NATS_URL=${NATS_URL}"
      - "NATS_AUTH_TOKEN=${NATS_AUTH_TOKEN}"
      - "MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}"
      - "FEATURE_FLAGS_SEND_LOGS_TO_LOKI=${FEATURE_FLAGS_SEND_LOGS_TO_LOKI}"
    networks:
      msl_network:
    deploy:
      replicas: 3
    healthcheck:
      test: "curl --fail http://msl_backend:8082/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  msl_aiworker:
    image: oliverschlueter/msl-aiworker:latest
    restart: unless-stopped
    depends_on:
      - msl_nats
      - msl_mongo
      - msl_qdrant
    environment:
      - "LOKI_URL=${LOKI_URL}"
      - "NATS_URL=${NATS_URL}"
      - "NATS_AUTH_TOKEN=${NATS_AUTH_TOKEN}"
      - "OLLAMA_URL=${OLLAMA_URL}"
      - "OLLAMA_MODEL=${OLLAMA_MODEL}"
      - "OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL}"
      - "QDRANT_HOST=${QDRANT_HOST}"
      - "QDRANT_PORT=${QDRANT_PORT}"
      - "QDRANT_API_KEY=${QDRANT_API_KEY}"
      - "FEATURE_FLAGS_SEND_LOGS_TO_LOKI=${FEATURE_FLAGS_SEND_LOGS_TO_LOKI}"
    networks:
      msl_network:
    deploy:
      replicas: 3
    healthcheck:
      test: "curl --fail http://msl_aiworker:8085/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  msl_monitoring:
    image: oliverschlueter/msl-monitoring:latest
    restart: unless-stopped
    depends_on:
      - msl_nats
    environment:
      - "LOKI_URL=${LOKI_URL}"
      - "NATS_URL=${NATS_URL}"
      - "NATS_AUTH_TOKEN=${NATS_AUTH_TOKEN}"
      - "FEATURE_FLAGS_SEND_LOGS_TO_LOKI=${FEATURE_FLAGS_SEND_LOGS_TO_LOKI}"
    networks:
      msl_network:
    deploy:
      replicas: 3
    healthcheck:
      test: "curl --fail http://msl_monitoring:8084/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Databases
  msl_mongo:
    image: mongo:latest
    container_name: msl_mongo
    restart: unless-stopped
    environment:
      - "MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}"
      - "MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}"
    networks:
      msl_network:
        aliases:
          - msl_mongo
    ports:
      - "27017:27017"
    healthcheck:
      test:
        [
          "CMD",
          "mongo",
          "--quiet",
          "127.0.0.1/test",
          "--eval",
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  msl_qdrant:
    image: qdrant/qdrant:latest
    container_name: msl_qdrant
    restart: unless-stopped
    environment:
      - "QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}"
    networks:
      msl_network:
        aliases:
          - msl_qdrant
    ports:
      - "6333:6333"
    healthcheck:
      test: "curl --fail http://msl_qdrant:6333/healthz || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Other
  msl_nats:
    image: nats:latest
    container_name: msl_nats
    restart: unless-stopped
    command: "--auth ${NATS_AUTH_TOKEN}"
    networks:
      msl_network:
        aliases:
          - msl_nats
    ports:
        - "4222:4222"
    healthcheck:
      test: "curl --fail http://msl_nats:8222/healthz || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

    # Observability stack
  msl_grafana:
    image: grafana/grafana:latest
    container_name: msl_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - "GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}"
    depends_on:
      - msl_loki
    networks:
        msl_network:
          aliases:
              - msl_grafana

  msl_loki:
    image: grafana/loki:latest
    container_name: msl_loki
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
    networks:
      msl_network:
        aliases:
          - msl_grafana
    healthcheck:
      test: "curl --fail http://msl_loki:3100/ready || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

networks:
  msl_network:
    driver: bridge